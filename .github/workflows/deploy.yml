name: Deploy Member Management System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        MEMBER_EMAIL: ${{ secrets.MEMBER_EMAIL }}
        MEMBER_PASSWORD: ${{ secrets.MEMBER_PASSWORD }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      run: |
        npm run db:push
        npm run check
        echo "âœ… All tests passed - TypeScript compilation successful"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      env:
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        MEMBER_EMAIL: ${{ secrets.MEMBER_EMAIL }}
        MEMBER_PASSWORD: ${{ secrets.MEMBER_PASSWORD }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        npm run build
        npm run db:push

    # Deploy to your hosting provider (uncomment and configure based on your needs)
    
    # Example: Deploy to Heroku
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.14
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: "your-email@example.com"
    
    # Example: Deploy to Vercel
    # - name: Deploy to Vercel
    #   uses: amondnet/vercel-action@v25
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.ORG_ID }}
    #     vercel-project-id: ${{ secrets.PROJECT_ID }}
    
    # Example: Deploy to AWS/DigitalOcean/etc via SSH
    # - name: Deploy via SSH
    #   uses: appleboy/ssh-action@v0.1.7
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.SSH_KEY }}
    #     script: |
    #       cd /path/to/your/app
    #       git pull origin main
    #       npm ci
    #       npm run db:push
    #       pm2 restart your-app

    - name: Deployment Success
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "All secrets are securely managed via GitHub Actions"